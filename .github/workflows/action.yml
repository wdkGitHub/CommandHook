name: "打包发布版本"
on:
    push:
        branches:
            - master
        paths:
            - gradle.properties
    workflow_dispatch:

permissions:
    contents: write
env:
    BRANCH_NAME: master

jobs:
    build-and-release:
        runs-on: ubuntu-latest
        env:
            GIT_USER_NAME: "GitHub Actions"
        steps:
            -   name: "检出仓库代码"
                uses: actions/checkout@v4
                with:
                    ref: ${{ env.BRANCH_NAME }}
                    fetch-depth: 0
                    fetch-tags: false

            -   name: "检测是否手动触发或版本变更"
                id: check-trigger
                run: |
                    if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                        echo "MANUAL_TRIGGER=true" >> $GITHUB_ENV
                        echo "PLUGIN_VERSION_CHANGED=true" >> $GITHUB_ENV
                    elif git diff HEAD~1 HEAD -- gradle.properties | grep "^+plugin.version="; then
                        echo "PLUGIN_VERSION_CHANGED=true" >> $GITHUB_ENV
                        NEW_VERSION=$(git diff HEAD~1 HEAD -- gradle.properties | grep "^+plugin.version=" | cut -d= -f2 | tr -d ' \r\n')
                        echo "NEW_PLUGIN_VERSION=$NEW_VERSION" >> $GITHUB_ENV
                    else
                        echo "PLUGIN_VERSION_CHANGED=false" >> $GITHUB_ENV
                    fi

            -   name: "设置 JDK21"
                uses: actions/setup-java@v4
                with:
                    distribution: 'temurin'
                    java-version: '21'
                    cache: 'gradle'

            -   name: "缓存 Gradle 依赖"
                uses: actions/cache@v3
                with:
                    path: ~/.gradle/caches
                    key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                    restore-keys: |
                        ${{ runner.os }}-gradle-

            -   name: "解析环境变量"
                id: set-env-vars
                run: |
                    export PLUGIN_NAME=$(awk -F= '/plugin.name/{print $2}' gradle.properties | tr -d ' \r\n')
                    export PLUGIN_VERSION=$(awk -F= '/plugin.version/{print $2}' gradle.properties | tr -d ' \r\n')
                    export PLUGIN_VENDOR_EMAIL=$(awk -F= '/plugin.vendor.email/{print $2}' gradle.properties | tr -d ' \r\n')
                    echo "PLUGIN_NAME=${PLUGIN_NAME}" >> $GITHUB_ENV
                    echo "PLUGIN_VERSION=${PLUGIN_VERSION}" >> $GITHUB_ENV
                    echo "PLUGIN_VENDOR_EMAIL=${PLUGIN_VENDOR_EMAIL}" >> $GITHUB_ENV
                    # 在手动触发时，设置 NEW_PLUGIN_VERSION 等于当前版本
                    if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                        echo "NEW_PLUGIN_VERSION=${PLUGIN_VERSION}" >> $GITHUB_ENV
                    fi

            -   name: "构建和发布插件"
                if: env.PLUGIN_VERSION_CHANGED == 'true'
                run: |
                    set -e
                    ./gradlew buildPlugin updatePluginXml --info --stacktrace \
                        -Purl=https://github.com/${{ github.repository }}/releases/download/v${{ env.NEW_PLUGIN_VERSION }}/${{ env.PLUGIN_NAME }}-${{ env.NEW_PLUGIN_VERSION }}.zip

            -   name: "提交版本变更"
                if: env.PLUGIN_VERSION_CHANGED == 'true'
                run: |
                    git config --global user.name "${{ env.GIT_USER_NAME }}"
                    git config --global user.email "${{ env.PLUGIN_VENDOR_EMAIL }}"
                    git diff --quiet || (git add . && git commit -m "🔖 发布版本 ${{ env.NEW_PLUGIN_VERSION }}")

            -   name: "创建 Git Tag"
                if: env.PLUGIN_VERSION_CHANGED == 'true'
                run: |
                    git fetch --tags
                    if git tag | grep -q "v${{ env.NEW_PLUGIN_VERSION }}"; then
                        echo "标签 v${{ env.NEW_PLUGIN_VERSION }} 已存在，本地删除..."
                        git tag -d "v${{ env.NEW_PLUGIN_VERSION }}"
                        git push origin --delete "v${{ env.NEW_PLUGIN_VERSION }}"
                    fi
                    git tag -a "v${{ env.NEW_PLUGIN_VERSION }}" -m "Version ${{ env.NEW_PLUGIN_VERSION }}"

            -   name: "发布版本"
                if: env.PLUGIN_VERSION_CHANGED == 'true'
                uses: softprops/action-gh-release@v2
                with:
                    tag_name: "v${{ env.NEW_PLUGIN_VERSION }}"
                    name: "v${{ env.NEW_PLUGIN_VERSION }}"
                    body: "🔖 发布版本 ${{ env.NEW_PLUGIN_VERSION }}"
                    files: build/distributions/${{ env.PLUGIN_NAME }}-${{ env.NEW_PLUGIN_VERSION }}.zip
                    prerelease: ${{ startsWith(env.NEW_PLUGIN_VERSION, 'SNAPSHOT') }}

            -   name: "推送提交或标签"
                if: env.PLUGIN_VERSION_CHANGED == 'true'
                run: |
                    git push origin ${{ env.BRANCH_NAME }} --tags || echo "没有需要推送的信息"
